extends ./layouts/article.pug

block article_content
  h1 Installation
  pre.hljs
    code.cli
      | npm i [-g|-D|-S] @puresamari/spb
      
  h1 Getting started
  p After you installed the spb application the easiest way to get started is using the 
    code init  command. Here is a step by step guide for it.
  ol
    li
      p
        code npm i -g @puresamari/spb
    li
      p
        code spb init
      ol
        li
          p Select the directory where spb should be created (leave empty if you want to init it in your current directory).
        li
          p Select the directory where spb should compile into (leave empty for dist)
        li
          p Select the files you want to compile (Add files one by one. To finish just leave the field empty and hit enter)
    li
      p
        code spb dev-server -c config.spb.json
  p If you want to run it in your local enviroment do:
  ol
    li
      p
        code npm i -D @puresamari/spb
    li
      p
        code npx spb init
      ol
        li
          p Same instructions as above
    li
      p
        code npx spb dev-server -c config.spb.json
  h1 CLI
  p Once the 
    code spb  cli is installed you can use the cli.
  h2 Usage:
  pre.hljs
    code.cli
      | spb [options] [command]
      
  p Options:
  ul
    li
      p
        code -V, --version  output the version number
    li
      p
        code -c, --config <path>  path to config json file (default: “config.spb.json”)
    li
      p
        code -o, --out <path>  where the compiles files should be compiled to (overwrites configurations from the config file)
    li
      p
        code --files <files...>  files that should be compiled (overwrites configurations from the config file). All files can also be defined with wildcardmatching for example 
        code ./views/*.pug
    li
      p
        code --verbose  enable verbose logging
    li
      p
        code -h, --help  display help for command
  p Commands:
  ul
    li
      p
        code init  generate the config file using the init-wizard.
    li
      p
        code build  build once (is default)
      ul
        li
          p
            code $ spb --config examples/hello-world/config.spb.json -o dist --files test.twig ...
    li
      p
        code watch  watch and automatically build when input files change
      ul
        li
          p
            code $ spb watch --config examples/hello-world/config.spb.json
    li
      p
        code dev-server  starts the dev server
      ul
        li
          p
            code $ spb dev-server --config examples/hello-world/config.spb.json
  h2 Dev Server
  p The dev server starts a server and loads all compiled files temporarily instead of building and saving them.
  p When opening a html file the devserver adds a script to it to automatically reload the page when changes occure to the code.
  h2 Config file
  p You can use a configuration file with the flag 
    code -c  or 
    code --config . All options declared in the config file will be overwritten by options from the cli:
  ul
    li
      p
        code spb public -c config.spb.json  if the config file has a declaration for output it will be overwritten with 
        code public  in this case.
    li
      p
        code spb public ./src/styles.css ./views/*.pug -c config.spb.json  if the config file has a declaration for files it will be overwritten with 
        code ./src/styles.css  and all 
        code ./views/*.pug  files in this case.
  p You can also use this projects JSON schema to ensure integrity but it is not necessary.
  p For example when the configuration file (for example named 
    code config.spb.json ) is in the root directory and 
    code spb  is installed locally:
  pre.hljs.language-json
    code
      | {
      |   "$schema": "node_modules/@puresamari/spb/lib/config.schema.json",
      |   "files": [
      |     "./src/example.pug",
      |     "./views/*.pug",
      |     "./src/index.twig",
      |     "./src/images/*",
      |     "./src/license.pdf",
      |     "./src/main.ts",
      |     "./src/styles.css"
      |   ],
      |   "output": "dist/",
      | }
      
  h3 PostCSS plugins
  p If it is necessary to add options to the builders / compilers (for example postcss plugins), you can add it to the 
    code compilers  part of the config file. Like in this example:
  pre.hljs.language-json
    code 
      | {
      |   "$schema": "node_modules/@puresamari/spb/lib/config.schema.json",
      |   
      |   ...
      |   
      |   "compilers": {
      |     "postcss": {
      |       "plugins": [
      |         ...
      |         "precss", // or other
      |         ...
      |       ]
      |     }
      |   }
      | }
      
  h3 Post build script
  p It is possible to run a script after a build was completed. 
    strong NOTE  this script will not be executed when running a 
    code dev-server .
  pre.hljs.language-json
    code 
      | {
      |   "$schema": "node_modules/@puresamari/spb/lib/config.schema.json",
      |   
      |   ...
      |   
      |   "postBuild": "npm run deploy" // For example
      | }
      
  p Using this config file you can then build your project like this: 
    code $ spb -c config.spb.json
  h1 Compilers
  p For examples take a look at 
    code examples  in this repository. The gh-page for this repository is built using 
    code spb  and you can have a look at the setup under 
    code examples/spb-page .
  p You can currently compile 
    code typescript , 
    code postcss , 
    code scss , 
    code js , 
    code pug  and 
    code twig  files uing 
    code spb . all other files given to the builder will simply be copied to the output directory.
  h2
    code twig  and 
    code pug
  p The 
    code spb  adds a context object (
    code spb ) to all 
    code .twig  and 
    code .pug  files which contains all 
    code stylesheets , 
    code scripts  and 
    code html  files. This allowes to dynamically add all files to the html page.
  h3 Expample usage for 
    code pug :
  pre.hljs.language-pug
    code 
      | 
      | html
      |   head
      |     
      |     ...
      | 
      |     each stylesheet in spb.stylesheets
      |       link(rel="text/stlesheet", href=stylesheet)
      |   
      |   body
      |     block content
      |     each script in spb.scripts
      |       script(type="text/javascript", src=script)
      
      
      
  h3 Expample usage for 
    code twig :
  pre.hljs.language-twig
    code 
      | ...
      | <head>
      |   ....
      |   {% for stylesheet in spb.stylesheets %}
      |     <link rel="stylesheet" href="{{stylesheet}}" >
      |   {% endfor %}
      |   ....
      | </head>
      | 
      | <body>
      |   ...
      |   {% for script in spb.scripts %}
      |     <script type="text/javascript" href="{{script}}" ></script>
      |   {% endfor %}
      |   ...
      | </body>
      
      
  h1 Links
  ul
    li
      p
        a(href="https://github.com/puresamari/spb/blob/master/CHANGELOG.md") Changelog